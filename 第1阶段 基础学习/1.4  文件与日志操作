太好了 🚀
我们进入 **阶段 1 - 第 4 节：文件与日志操作（保存监控结果）**

---

## 🧩 第 4 节：文件与日志操作

在 SRE 场景中，监控脚本**不仅要检测，还要记录**：

* 告警日志
* 巡检历史
* 指标数据备份

Python 提供了两种常用方式：**文件读写**和**日志模块 logging**。

---

### 1️⃣ 简单文件写入

```python
# 检测结果
results = [
    "auth: ✅ 正常",
    "payment: ⚠️ 异常 (status=503)",
    "monitoring: ✅ 正常"
]

# 写入日志文件
with open("monitor_log.txt", "a", encoding="utf-8") as f:
    for line in results:
        f.write(line + "\n")

print("✅ 检测结果已保存到 monitor_log.txt")
```

💡 说明：

* `"a"` 模式：追加写入（不会覆盖原文件）
* `"w"` 模式：覆盖写入
* `encoding="utf-8"`：防止中文乱码

---

### 2️⃣ 使用 logging 模块

logging 是 Python 标准日志模块，SRE 脚本推荐使用它，方便等级管理和轮转。

```python
import logging

# 日志配置
logging.basicConfig(
    filename="monitor.log",
    level=logging.INFO,  # 日志级别
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# 写入不同等级日志
logging.info("auth: ✅ 正常")
logging.warning("payment: ⚠️ 异常 (status=503)")
logging.info("monitoring: ✅ 正常")

print("✅ 日志已写入 monitor.log")
```

💡 优势：

* 支持等级（DEBUG / INFO / WARNING / ERROR / CRITICAL）
* 自动记录时间戳
* 可以配合 `RotatingFileHandler` 做日志轮转

---

### 3️⃣ 小练习

请你写一个脚本：

> 假设 CPU 使用率检查函数 `check_cpu(usage, threshold)` 已经写好
> 监控三个节点 CPU `[72, 85, 60]`，阈值 `80`
> 脚本要求：
>
> 1. 检测每个 CPU
> 2. 将检测结果写入文件 `cpu_log.txt`
> 3. 每条结果前加上当前时间戳（如：`2025-10-26 09:50:00 - ✅ CPU 正常，当前 72%`）

---

是否希望我接下来：
A. 给出练习答案 + 讲解
B. 继续讲解下一节（异常处理 + 错误保护脚本）

好的 👍 我们完成 **CPU 检测写入文件练习**，并讲解每一步在 SRE 脚本中的实际意义。

---

## 🧩 练习题：CPU 检测写入文件

**要求回顾：**

* 已有函数：`check_cpu(usage, threshold)`
* CPU 数据：`[72, 85, 60]`
* 阈值：80
* 将检测结果写入 `cpu_log.txt`
* 每条结果前加时间戳

---

### ✅ 参考答案

```python
import time

# 定义检查函数
def check_cpu(usage, threshold):
    if usage > threshold:
        return f"⚠️ CPU 超过阈值！当前 {usage}%"
    else:
        return f"✅ CPU 正常，当前 {usage}%"

# CPU 数据与阈值
cpu_list = [72, 85, 60]
cpu_threshold = 80

# 打开文件追加写入
with open("cpu_log.txt", "a", encoding="utf-8") as f:
    for cpu in cpu_list:
        result = check_cpu(cpu, cpu_threshold)
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")  # 当前时间
        line = f"{timestamp} - {result}"
        f.write(line + "\n")  # 写入文件
        print(line)  # 控制台输出
```

---

### 💡 输出示例

```
2025-10-26 09:50:00 - ✅ CPU 正常，当前 72%
2025-10-26 09:50:00 - ⚠️ CPU 超过阈值！当前 85%
2025-10-26 09:50:00 - ✅ CPU 正常，当前 60%
```

同时这些结果也被保存到 **`cpu_log.txt`**，方便历史审计。

---

### 🧠 知识点讲解

| 知识点                    | 说明            | SRE 实战意义        |
| ---------------------- | ------------- | --------------- |
| `time.strftime()`      | 获取格式化时间       | 给监控日志添加时间戳，方便追踪 |
| `with open(..., "a")`  | 文件追加写入        | 记录历史巡检，不会覆盖之前数据 |
| `f.write(line + "\n")` | 写入文件          | 将监控结果落地，方便报表或审计 |
| 控制台打印                  | `print(line)` | 同时输出到控制台，便于实时观察 |

---

### 🔧 进阶思路

1. 使用 **logging 模块** 替代手动写入文件，可自动加时间、设置日志等级：

```python
import logging
logging.basicConfig(filename="cpu_log.log", level=logging.INFO,
                    format="%(asctime)s - %(message)s")
logging.info(result)
```

2. 可以把函数改造成返回布尔值 + 文本，再决定是否发送告警邮件或飞书通知。

---

下一步，我们可以进入 **阶段 1 的最后一节**：

**「异常处理 + 错误保护脚本」** 🛡️

> 让你的监控脚本即使遇到错误，也能稳定运行，不中断监控任务。

是否继续？
