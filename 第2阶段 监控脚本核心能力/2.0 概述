太好了 🚀
我们直接进入 **阶段 2：监控脚本核心能力（API / 告警 / SSH）**，这是 SRE Python 实战中非常关键的一部分。
目标是让你能**直接写出监控数据采集、告警处理、远程巡检**的脚本。

---

## 🧭 阶段 2 核心模块

| 模块          | Python 库               | SRE 实战用途                                           |
| ----------- | ---------------------- | -------------------------------------------------- |
| HTTP API 调用 | `requests`             | 调用 Prometheus / Alertmanager / Grafana API 获取指标或告警 |
| SSH 自动化     | `paramiko`             | 批量登录节点执行命令，获取系统信息                                  |
| 本地 Shell    | `subprocess`           | 执行本地运维命令（ping、curl、df 等）                           |
| 邮件告警        | `smtplib` / `email`    | 发送告警邮件通知                                           |
| 数据解析        | `json` / `yaml` / `re` | 处理 API 返回数据或日志内容                                   |

---

### 1️⃣ Prometheus API 查询指标

```python
import requests

# 假设 Prometheus API URL
url = "http://localhost:9090/api/v1/query"
query = {"query": "node_cpu_seconds_total"}

response = requests.get(url, params=query)
data = response.json()

# 打印部分数据
for result in data["data"]["result"][:5]:
    print(result["metric"], result["value"])
```

💡 说明：

* `requests.get(url, params=query)` 发起 GET 请求
* `data["data"]["result"]` 是 Prometheus 返回的指标列表
* 可进一步处理并写入日志或告警系统

---

### 2️⃣ Alertmanager API 查询告警

```python
url = "http://localhost:9093/api/v1/alerts"
response = requests.get(url)
alerts = response.json()["data"]

for alert in alerts:
    print(f"{alert['labels']['alertname']} 状态: {alert['status']}")
```

* 获取活跃告警列表
* 可统计告警数量、按业务分类、生成日报

---

### 3️⃣ SSH 批量执行命令（Paramiko）

```python
import paramiko

host = "192.168.1.100"
username = "user"
password = "pass"

ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(host, username=username, password=password)

stdin, stdout, stderr = ssh.exec_command("uptime")
print(stdout.read().decode())

ssh.close()
```

💡 可批量循环多台主机执行命令，比如：

* CPU / 内存 / 磁盘巡检
* 服务状态检查（systemctl status xxx）

---

### 4️⃣ 发送邮件告警

```python
import smtplib
from email.mime.text import MIMEText

msg = MIMEText("CPU 使用率超过阈值！")
msg['Subject'] = "监控告警"
msg['From'] = "monitor@example.com"
msg['To'] = "admin@example.com"

server = smtplib.SMTP("smtp.example.com", 25)
server.send_message(msg)
server.quit()
```

💡 在实际 SRE 场景中，可以配合轮询或 API 检测，实现自动告警。

---

### 🔧 小练习

请写一个脚本，实现以下逻辑：

1. 模拟从 Prometheus API 获取三个服务的 CPU 使用率：

```python
cpu_usages = {"auth": 72, "payment": 88, "monitoring": 65}
```

2. 阈值为 80，超过阈值的服务，打印告警信息
3. 将结果写入本地日志文件 `cpu_alert.log`，格式：

```
[2025-10-26 09:00:00] payment: ⚠️ CPU 超过阈值！当前 88%
```

---

是否希望我直接给出 **练习参考答案 + 讲解**，或者先帮你写一个 **SRE 实战模板脚本**（整合 API + SSH + 告警）？
